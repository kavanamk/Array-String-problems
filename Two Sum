#Input: height = [1,8,6,2,5,4,8,3,7]
#Output: 49
#Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. 
#In this case, the max area of water (blue section) the container can contain is 49.

def computeArea(h1,h2,d):
    return (min(h1,h2)*d)

class Solution(object):
    def maxArea(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        n=len(height)
        areas=[]
        if(n==0 or n==1):
            return 0
        for i in range(0,n-2):
            for j in range(i+1,n):
                areas.append(computeArea(h[i],h[j],j-i))
        return max(areas)
        
 #O(n^2) time complexity


class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        d = {}
        for i in range(len(nums)):
            complement = target - nums[i]
            if complement in d:
                return [d[complement], i]
            d[nums[i]] = i
#O(n) complexity!!!!!
